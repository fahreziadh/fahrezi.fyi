export default [
  {
    "content": "Ever wondered how tech giants handle millions of users without breaking a sweat? Or why your app crashes under heavy load? Dive into these 10 crucial system design concepts – explained so simply, even your grandma would get it!\n\n### 1. Scalability: Growing Pains, Solved\n* **What it is**: Making your system handle growth like a champ\n* **Types**:\n  - Vertical (beefing up one machine)\n  - Horizontal (adding more machines)\n* **Why it matters**: Because nobody likes a website that crashes on Black Friday!\n\n### 2. Load Balancing: Traffic Control for Servers\n* **In a nutshell**: Distributing work evenly so no server has a meltdown\n* **Why it matters**: It's like having multiple cashiers during rush hour – faster service for everyone!\n\n### 3. Caching: The Art of Being Lazy (Efficiently)\n* **What it does**: Remembers frequently used data for quick access\n* **Why it matters**: Imagine if your brain cached the location of your keys!\n\n### 4. Database Sharding: Divide and Conquer\n* **The gist**: Splitting a huge database into manageable chunks\n* **Why it matters**: It's like organizing your closet – finding things becomes way easier!\n\n### 5. CAP Theorem: The \"Pick Two\" Dilemma\n* **The choice**: Consistency, Availability, Partition tolerance – choose wisely!\n* **Why it matters**: It's the \"Fast, Good, Cheap – pick two\" of distributed systems\n\n### 6. Microservices: Small is the New Big\n* **What it is**: Breaking down your app into bite-sized, independent services\n* **Why it matters**: It's like LEGO – easier to build, change, and fix!\n\n### 7. API Gateway: The Ultimate Bouncer\n* **Job description**: Guards your APIs, handles security, directs traffic\n* **Why it matters**: Think of it as a smart receptionist for your digital business\n\n### 8. Eventual Consistency: Patience is a Virtue\n* **In simple terms**: Data will be consistent... eventually\n* **Why it matters**: It's like gossip – everyone will get the right info, just not instantly\n\n### 9. CDN: The Global Coffee Shop Chain\n* **What it does**: Puts your content closer to users, everywhere\n* **Why it matters**: Faster load times = happier users = more business\n\n### 10. Containerization: Pack It, Ship It, Run It\n* **The concept**: Wrap up your app with everything it needs\n* **Why it matters**: It's like a TV dinner, but for code – consistent everywhere!\n\nRemember, understanding these concepts is like learning the rules of the road. You might not use them all every day, but knowing them makes you a better driver (or in this case, a better developer)!",
    "title": "10 System Design Concept You Should Know",
    "summary": "This is my first post!",
    "slug": "10-system-design-concept-you-should-know-en",
    "createdAt": "2024-08-27T21:46:20.158Z",
    "_meta": {
      "filePath": "en/10-system-design-concept-you-should-know.mdx",
      "fileName": "10-system-design-concept-you-should-know.mdx",
      "directory": "en",
      "extension": "mdx",
      "path": "en/10-system-design-concept-you-should-know"
    },
    "mdx": "var Component=(()=>{var u=Object.create;var l=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var y=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var f=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports),b=(i,e)=>{for(var r in e)l(i,r,{get:e[r],enumerable:!0})},h=(i,e,r,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of y(e))!p.call(i,t)&&t!==r&&l(i,t,{get:()=>e[t],enumerable:!(s=g(e,t))||s.enumerable});return i};var w=(i,e,r)=>(r=i!=null?u(m(i)):{},h(e||!i||!i.__esModule?l(r,\"default\",{value:i,enumerable:!0}):r,i)),v=i=>h(l({},\"__esModule\",{value:!0}),i);var a=f((I,o)=>{o.exports=_jsx_runtime});var k={};b(k,{default:()=>d});var n=w(a());function c(i){let e={h3:\"h3\",li:\"li\",p:\"p\",strong:\"strong\",ul:\"ul\",...i.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"Ever wondered how tech giants handle millions of users without breaking a sweat? Or why your app crashes under heavy load? Dive into these 10 crucial system design concepts \\u2013 explained so simply, even your grandma would get it!\"}),`\n`,(0,n.jsx)(e.h3,{children:\"1. Scalability: Growing Pains, Solved\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"What it is\"}),\": Making your system handle growth like a champ\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Types\"}),\":\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Vertical (beefing up one machine)\"}),`\n`,(0,n.jsx)(e.li,{children:\"Horizontal (adding more machines)\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Why it matters\"}),\": Because nobody likes a website that crashes on Black Friday!\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"2. Load Balancing: Traffic Control for Servers\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"In a nutshell\"}),\": Distributing work evenly so no server has a meltdown\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Why it matters\"}),\": It's like having multiple cashiers during rush hour \\u2013 faster service for everyone!\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"3. Caching: The Art of Being Lazy (Efficiently)\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"What it does\"}),\": Remembers frequently used data for quick access\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Why it matters\"}),\": Imagine if your brain cached the location of your keys!\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"4. Database Sharding: Divide and Conquer\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"The gist\"}),\": Splitting a huge database into manageable chunks\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Why it matters\"}),\": It's like organizing your closet \\u2013 finding things becomes way easier!\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:'5. CAP Theorem: The \"Pick Two\" Dilemma'}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"The choice\"}),\": Consistency, Availability, Partition tolerance \\u2013 choose wisely!\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Why it matters\"}),`: It's the \"Fast, Good, Cheap \\u2013 pick two\" of distributed systems`]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"6. Microservices: Small is the New Big\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"What it is\"}),\": Breaking down your app into bite-sized, independent services\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Why it matters\"}),\": It's like LEGO \\u2013 easier to build, change, and fix!\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"7. API Gateway: The Ultimate Bouncer\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Job description\"}),\": Guards your APIs, handles security, directs traffic\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Why it matters\"}),\": Think of it as a smart receptionist for your digital business\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"8. Eventual Consistency: Patience is a Virtue\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"In simple terms\"}),\": Data will be consistent... eventually\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Why it matters\"}),\": It's like gossip \\u2013 everyone will get the right info, just not instantly\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"9. CDN: The Global Coffee Shop Chain\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"What it does\"}),\": Puts your content closer to users, everywhere\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Why it matters\"}),\": Faster load times = happier users = more business\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"10. Containerization: Pack It, Ship It, Run It\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"The concept\"}),\": Wrap up your app with everything it needs\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Why it matters\"}),\": It's like a TV dinner, but for code \\u2013 consistent everywhere!\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Remember, understanding these concepts is like learning the rules of the road. You might not use them all every day, but knowing them makes you a better driver (or in this case, a better developer)!\"})]})}function d(i={}){let{wrapper:e}=i.components||{};return e?(0,n.jsx)(e,{...i,children:(0,n.jsx)(c,{...i})}):c(i)}return v(k);})();\n;return Component;"
  },
  {
    "content": "Hey, developer! Mau bikin aplikasi yang nggak lemot meski usernya jutaan? Atau penasaran kenapa app favoritmu bisa super cepat? Yuk, kenalan sama 10 konsep system design ini. Dijamin bikin kamu makin jago!\n\n### 1. Scalability\n* **Intinya**: Bikin sistem yang bisa \"naik kelas\" dengan mulus\n* **Caranya**:\n  - Vertical Scaling (upgrade mesin jadi lebih canggih)\n  - Horizontal Scaling (nambah mesin baru)\n* **Kenapa penting**: Biar sistemmu nggak tepar pas lagi rame-ramenya\n\n### 2. Load Balancing\n* **Fungsinya**: Kayak pak polisi yang ngatur lalu lintas, tapi buat server\n* **Enaknya**: Server nggak ada yang kecapekan, semua kebagian kerjaan\n\n### 3. Caching\n* **Konsepnya**: Nyimpen data populer di \"kulkas\", biar gampang diambil\n* **Plusnya**: Akses data jadi secepat kilat!\n\n### 4. Database Sharding\n* **Idenya**: Mecah database gede jadi potongan-potongan kecil\n* **Manfaatnya**: Data segudang pun tetep bisa diurus dengan gampang\n\n### 5. CAP Theorem\n* **Singkatnya**: Pilih 2 dari 3: Consistency, Availability, Partition Tolerance\n* **Pentingnya**: Buat nentuin prioritas sistem distributed kamu\n\n### 6. Microservices Architecture\n* **Konsepnya**: Bikin aplikasi dari komponen-komponen kecil yang mandiri\n* **Kelebihannya**: Gampang dikembangin dan di-deploy, fleksibel pula!\n\n### 7. API Gateway\n* **Kegunaannya**: Jadi \"resepsionis\" buat semua request ke API kamu\n* **Bagusnya**: Bikin sistem lebih rapi dan aman\n\n### 8. Eventual Consistency\n* **Maksudnya**: Data bakal konsisten... eventually. Sabar ya!\n* **Kapan dipake**: Pas kamu butuh sistem yang super available\n\n### 9. Content Delivery Network (CDN)\n* **Tujuannya**: Nyebarin konten ke server di mana-mana\n* **Hasilnya**: User dari ujung dunia mana pun bisa akses konten cepet!\n\n### 10. Containerization\n* **Gambaran**: Ngepak aplikasi sama semua kebutuhannya dalam satu \"koper\"\n* **Enaknya**: Di-deploy di mana aja jadi gampang, konsisten pula\n\nNah, gimana? Seru kan konsep-konsepnya? Dengan paham ini semua, kamu udah selangkah lebih maju buat jadi developer handal. Ingat, di dunia tech yang berubah secepat kilat ini, belajar nggak pernah berhenti.",
    "title": "10 Konsep System Design yang wajib kamu tahu!",
    "summary": "This is my first post!",
    "slug": "10-system-design-concept-you-should-know-id",
    "createdAt": "2024-08-27T21:46:20.158Z",
    "_meta": {
      "filePath": "id/10-system-design-concept-you-should-know.mdx",
      "fileName": "10-system-design-concept-you-should-know.mdx",
      "directory": "id",
      "extension": "mdx",
      "path": "id/10-system-design-concept-you-should-know"
    },
    "mdx": "var Component=(()=>{var g=Object.create;var r=Object.defineProperty;var o=Object.getOwnPropertyDescriptor;var k=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var y=(i,n)=>()=>(n||i((n={exports:{}}).exports,n),n.exports),b=(i,n)=>{for(var e in n)r(i,e,{get:n[e],enumerable:!0})},d=(i,n,e,s)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let l of k(n))!m.call(i,l)&&l!==e&&r(i,l,{get:()=>n[l],enumerable:!(s=o(n,l))||s.enumerable});return i};var j=(i,n,e)=>(e=i!=null?g(p(i)):{},d(n||!i||!i.__esModule?r(e,\"default\",{value:i,enumerable:!0}):e,i)),v=i=>d(r({},\"__esModule\",{value:!0}),i);var h=y((x,t)=>{t.exports=_jsx_runtime});var C={};b(C,{default:()=>u});var a=j(h());function c(i){let n={h3:\"h3\",li:\"li\",p:\"p\",strong:\"strong\",ul:\"ul\",...i.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:\"Hey, developer! Mau bikin aplikasi yang nggak lemot meski usernya jutaan? Atau penasaran kenapa app favoritmu bisa super cepat? Yuk, kenalan sama 10 konsep system design ini. Dijamin bikin kamu makin jago!\"}),`\n`,(0,a.jsx)(n.h3,{children:\"1. Scalability\"}),`\n`,(0,a.jsxs)(n.ul,{children:[`\n`,(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:\"Intinya\"}),': Bikin sistem yang bisa \"naik kelas\" dengan mulus']}),`\n`,(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:\"Caranya\"}),\":\",`\n`,(0,a.jsxs)(n.ul,{children:[`\n`,(0,a.jsx)(n.li,{children:\"Vertical Scaling (upgrade mesin jadi lebih canggih)\"}),`\n`,(0,a.jsx)(n.li,{children:\"Horizontal Scaling (nambah mesin baru)\"}),`\n`]}),`\n`]}),`\n`,(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:\"Kenapa penting\"}),\": Biar sistemmu nggak tepar pas lagi rame-ramenya\"]}),`\n`]}),`\n`,(0,a.jsx)(n.h3,{children:\"2. Load Balancing\"}),`\n`,(0,a.jsxs)(n.ul,{children:[`\n`,(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:\"Fungsinya\"}),\": Kayak pak polisi yang ngatur lalu lintas, tapi buat server\"]}),`\n`,(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:\"Enaknya\"}),\": Server nggak ada yang kecapekan, semua kebagian kerjaan\"]}),`\n`]}),`\n`,(0,a.jsx)(n.h3,{children:\"3. Caching\"}),`\n`,(0,a.jsxs)(n.ul,{children:[`\n`,(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:\"Konsepnya\"}),': Nyimpen data populer di \"kulkas\", biar gampang diambil']}),`\n`,(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:\"Plusnya\"}),\": Akses data jadi secepat kilat!\"]}),`\n`]}),`\n`,(0,a.jsx)(n.h3,{children:\"4. Database Sharding\"}),`\n`,(0,a.jsxs)(n.ul,{children:[`\n`,(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:\"Idenya\"}),\": Mecah database gede jadi potongan-potongan kecil\"]}),`\n`,(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:\"Manfaatnya\"}),\": Data segudang pun tetep bisa diurus dengan gampang\"]}),`\n`]}),`\n`,(0,a.jsx)(n.h3,{children:\"5. CAP Theorem\"}),`\n`,(0,a.jsxs)(n.ul,{children:[`\n`,(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:\"Singkatnya\"}),\": Pilih 2 dari 3: Consistency, Availability, Partition Tolerance\"]}),`\n`,(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:\"Pentingnya\"}),\": Buat nentuin prioritas sistem distributed kamu\"]}),`\n`]}),`\n`,(0,a.jsx)(n.h3,{children:\"6. Microservices Architecture\"}),`\n`,(0,a.jsxs)(n.ul,{children:[`\n`,(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:\"Konsepnya\"}),\": Bikin aplikasi dari komponen-komponen kecil yang mandiri\"]}),`\n`,(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:\"Kelebihannya\"}),\": Gampang dikembangin dan di-deploy, fleksibel pula!\"]}),`\n`]}),`\n`,(0,a.jsx)(n.h3,{children:\"7. API Gateway\"}),`\n`,(0,a.jsxs)(n.ul,{children:[`\n`,(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:\"Kegunaannya\"}),': Jadi \"resepsionis\" buat semua request ke API kamu']}),`\n`,(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:\"Bagusnya\"}),\": Bikin sistem lebih rapi dan aman\"]}),`\n`]}),`\n`,(0,a.jsx)(n.h3,{children:\"8. Eventual Consistency\"}),`\n`,(0,a.jsxs)(n.ul,{children:[`\n`,(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:\"Maksudnya\"}),\": Data bakal konsisten... eventually. Sabar ya!\"]}),`\n`,(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:\"Kapan dipake\"}),\": Pas kamu butuh sistem yang super available\"]}),`\n`]}),`\n`,(0,a.jsx)(n.h3,{children:\"9. Content Delivery Network (CDN)\"}),`\n`,(0,a.jsxs)(n.ul,{children:[`\n`,(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:\"Tujuannya\"}),\": Nyebarin konten ke server di mana-mana\"]}),`\n`,(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:\"Hasilnya\"}),\": User dari ujung dunia mana pun bisa akses konten cepet!\"]}),`\n`]}),`\n`,(0,a.jsx)(n.h3,{children:\"10. Containerization\"}),`\n`,(0,a.jsxs)(n.ul,{children:[`\n`,(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:\"Gambaran\"}),': Ngepak aplikasi sama semua kebutuhannya dalam satu \"koper\"']}),`\n`,(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:\"Enaknya\"}),\": Di-deploy di mana aja jadi gampang, konsisten pula\"]}),`\n`]}),`\n`,(0,a.jsx)(n.p,{children:\"Nah, gimana? Seru kan konsep-konsepnya? Dengan paham ini semua, kamu udah selangkah lebih maju buat jadi developer handal. Ingat, di dunia tech yang berubah secepat kilat ini, belajar nggak pernah berhenti.\"})]})}function u(i={}){let{wrapper:n}=i.components||{};return n?(0,a.jsx)(n,{...i,children:(0,a.jsx)(c,{...i})}):c(i)}return v(C);})();\n;return Component;"
  }
];